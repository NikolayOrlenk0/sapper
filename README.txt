# Проект Сапер

Это простая реализация игры "Сапер" на C++, использующая библиотеку FLTK для графического интерфейса.

## Установка

1. Склонируйте репозиторий:
	git clone https://github.com/NikolayOrlenk0/sapper.git

2.Перейдите в директорию проекта:
	cd sapper

3.Соберите проект с помощью CMake:
	cmake .
	make

4.Запустите игру:
	./sapper

Как использовать:
Нажимайте на клетки для открытия ячеек.
Используйте правый клик для установки флага на клетку.
Игра завершится, если вы откроете мину или очистите все безопасные клетки.

Описание функций

1. **Имя функции и её описание**:
   - Название функции.
   - Краткое описание её назначения и того, что она делает.

2. **Параметры**:
   - Описание всех входных параметров, их типов и того, что они представляют. Укажите, если параметр опционален или имеет стандартное значение.

3. **Возвращаемое значение**:
   - Если функция что-то возвращает, укажите тип возвращаемого значения и объясните, что оно означает.

4. **Пример использования**:
   - Простой пример кода, как использовать функцию. Это поможет другим разработчикам понять, как интегрировать её в свой код.


### `void Table::fill_table(Vec2d bomb);`
**Описание**: 
	Эта функция заполняет таблицу минами. Для каждой клетки, где находится бомба, обновляется количество соседних мин для всех смежных клеток.

**Параметры**:
	Vec2d bomb`: Координаты клетки, в которой размещена мина. Этот параметр задается в виде объекта `Vec2d`, содержащего координаты `(x, y)`.

**Пример**:
	cpp
Vec2d bomb(3, 4); // Устанавливаем мину в клетке с координатами (3, 4)
table.fill_table(bomb); // Заполняем таблицу вокруг этой мины

----------------------------------------------------------------------

Класс Table
Этот класс управляет игровым полем, хранит данные о клетках и реализует игровую логику. Он использует внутренний вектор для хранения клеток и управляет минами, флагами и количеством соседних мин.

Конструктор: Table()
Описание: Конструктор инициализирует игровое поле размером, заданным в настройках (GRID_HEIGHT и GRID_WIDTH), создавая все клетки. Затем генерируются мины с использованием класса Bombs и заполняется поле.

Метод: void toggle_flag(Vec2d point);
Описание: Переключает флаг на клетке. Если на клетке был установлен флаг, он снимается, если нет — устанавливается.

Параметры: Vec2d point: Координаты клетки, с которой нужно работать.
Vec2d point(5, 5);
table.toggle_flag(point);
-----------
Метод: std::string adjacent_mines(Vec2d point);
Описание: Возвращает количество мин вокруг указанной клетки.

Параметры:

Vec2d point: Координаты клетки, для которой нужно узнать количество мин-соседей.
Возвращает:

Строку с количеством мин вокруг клетки.
Пример:
Vec2d point(2, 3);
std::string mines = table.adjacent_mines(point);
std::cout << "Количество мин вокруг: " << mines << std::endl;
---------------


Я не могу непосредственно создать файл Word для вас, так как мои возможности ограничены текстовым интерфейсом. Однако я могу предоставить вам текст для файла README.md, который вы можете легко вставить в любой текстовый редактор и сохранить как файл .md или .txt, а затем, если нужно, сконвертировать в формат Word.

Вот пример файла README.md на основе вашего кода:

markdown
Копировать код
# Игра "Сапер" на C++

Это реализация игры "Сапер" на C++, в которой используется класс `Table` для управления игровым полем и клетками. Игроки могут открывать клетки на поле, устанавливать флаги и избегать мин. Игровое поле генерируется случайным образом, и после окончания игры можно перегенерировать поле.

## Установка

1. Склонируйте репозиторий:
   ```bash
   git clone https://github.com/yourusername/sapper.git
Перейдите в директорию проекта:

bash
Копировать код
cd sapper
Соберите проект с помощью CMake:

bash
Копировать код
cmake .
make
Запустите игру:

bash

./sapper
Как использовать
Нажимайте на клетки для их открытия.
Используйте правый клик для установки флага на клетку.
Игра заканчивается, если вы открываете мину или очищаете все безопасные клетки.

-------------------------
Описание классов и функций
Класс Table
Этот класс управляет игровым полем, хранит данные о клетках и реализует игровую логику. Он использует внутренний вектор для хранения клеток и управляет минами, флагами и количеством соседних мин.

Конструктор: Table()
Описание: Конструктор инициализирует игровое поле размером, заданным в настройках (GRID_HEIGHT и GRID_WIDTH), создавая все клетки. Затем генерируются мины с использованием класса Bombs и заполняется поле.

Метод: void fill_table(Vec2d bomb);
Описание: Заполняет таблицу миной и обновляет соседние клетки, устанавливая количество мин рядом с каждой клеткой.

Параметры:
Vec2d bomb: Координаты клетки с миной.
Пример:

Vec2d bomb(3, 4);
table.fill_table(bomb); // Заполняем таблицу вокруг этой мины

-------------------------
Метод: std::set<std::pair<int, int>> open_cells(Vec2d point);
Описание: Открывает клетку на игровом поле. Если клетка пустая (с нулем мин вокруг), рекурсивно открывает соседние клетки.

Параметры:

Vec2d point: Координаты клетки, с которой начинается открытие.
Возвращает:

Множество пар координат открытых клеток.
Пример:

Vec2d point(1, 1);
std::set<std::pair<int, int>> openedCells = table.open_cells(point);

-------------------------
Метод: void toggle_flag(Vec2d point);
Описание: Переключает флаг на клетке. Если на клетке был установлен флаг, он снимается, если нет — устанавливается.

Параметры:

Vec2d point: Координаты клетки, с которой нужно работать.
Пример:
Vec2d point(5, 5);
table.toggle_flag(point);
-------------------------
Метод: bool check_win();
Описание: Проверяет, выиграл ли игрок. Для выигрыша все мины должны быть помечены флагами, и все пустые клетки должны быть открыты.

Возвращает:

true, если игрок выиграл, иначе false.
Пример:

if (table.check_win()) {
    std::cout << "Вы выиграли!" << std::endl;
}

-------------------------
Метод: std::string adjacent_mines(Vec2d point);
Описание: Возвращает количество мин вокруг указанной клетки.

Параметры:

Vec2d point: Координаты клетки, для которой нужно узнать количество мин-соседей.
Возвращает:

Строку с количеством мин вокруг клетки.
Пример:
Vec2d point(2, 3);
std::string mines = table.adjacent_mines(point);
std::cout << "Количество мин вокруг: " << mines << std::endl;

-------------------------
Метод: bool is_flag(Vec2d point);
Описание: Проверяет, установлен ли флаг на клетке.

Параметры:

Vec2d point: Координаты клетки.
Возвращает:

true, если на клетке установлен флаг, иначе false.
Пример:
if (table.is_flag(point)) {
    std::cout << "На клетке установлен флаг." << std::endl;
}
-------------------------
Метод: bool is_mine(Vec2d point);
Описание: Проверяет, содержит ли клетка мину.

Параметры:

Vec2d point: Координаты клетки.
Возвращает:

true, если клетка содержит мину, иначе false.
Пример:
if (table.is_mine(point)) {
    std::cout << "Это мина!" << std::endl;
}

-------------------------
Метод: bool is_revealed(Vec2d point);
Описание: Проверяет, была ли клетка открыта.

Параметры:

Vec2d point: Координаты клетки.
Возвращает:

true, если клетка открыта, иначе false.
Пример:
if (table.is_revealed(point)) {
    std::cout << "Клетка открыта." << std::endl;
}

-------------------------
Метод: void regeneration_table();
Описание: Перегенерирует таблицу, очищая старое игровое поле и создавая новое с минами.

Пример:

table.regeneration_table();

-------------------------
Метод: bool check_win();
Описание: Этот метод проверяет, выиграл ли игрок. Для того чтобы выиграть, все мины должны быть помечены флагами, а все безопасные клетки (которые не содержат мин) должны быть открыты.
- `true`, если игрок выиграл (все мины помечены флагами и все пустые клетки открыты).
- `false`, если игрок не выиграл.

Пример:
if (table.check_win()) {
    std::cout << "Сообщение о победе" << std::endl;
} else {
    std::cout << "Сообщение о проигрыше" << std::endl;
}


